#!/usr/bin/env node
/* eslint-disable require-jsdoc */

/**
 * Module dependencies.
 */
require('dotenv').config();
const app = require('../app');
const debug = require('debug')('profile:server');
const http = require('http');
const jwt = require('jsonwebtoken');

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '8080');
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */
const JWT_SECRET = process.env.JWT_SECRET || 'putyourrandomstringhere';

const appServer =server.listen(port);
const io = require('socket.io')(appServer, {
  cors: {
    origin: process.env.CORS_ORIGIN || '*',
    methods: ['GET', 'POST'],
    allowedHeaders: ['authorization'],
  },
});
io.use((socket, next) => {
  try {
    const payload = jwt.verify(
        socket.handshake.headers.authorization,
        JWT_SECRET);
    socket.payload = payload;
    next();
  } catch (err) {
    console.log('socket auth failed!');
    next(new AuthFailed());
  }
}).on('connection', function(socket) {
  const clientID = socket.payload.signedUser._id;
  socket.join(clientID);
  io.to(clientID).emit('hi!');
  console.log(clientID + ' new connection');
});
app.set('socketio', io);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string' ?
    'Pipe ' + port :
    'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string' ?
    'pipe ' + addr :
    'port ' + addr.port;
  debug('Listening on ' + bind);
}
